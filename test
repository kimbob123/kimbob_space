selected_columns = ['annual_inc', 'avg_cur_bal', 'dti', 'fico_range_high', 'grade',
                    'home_ownership', 'installment', 'int_rate', 'loan_amnt', 'mort_acc', 'revol_util',
                    'sub_grade', 'term', 'tot_hi_cred_lim', 'num_sats', 'pct_tl_nvr_dlq', 'total_bc_limit',
                    'total_il_high_credit_limit', 'total_rev_hi_lim', 'verification_status',
                    'chargeoff_within_12_mths', 'collections_12_mths_ex_med', 'delinq_2yrs', 'hardship_flag',
                    'num_accts_ever_120_pd', 'num_tl_120dpd_2m', 'num_tl_30dpd', 'num_tl_90g_dpd_24m',
                    'pub_rec', 'pub_rec_bankruptcies', 'defaulter', 'tax_liens']



#'num_il_tl', 'num_op_rev_tl', 'num_rev_accts', 'bc_open_to_buy' ,'bc_util' #'fico_range_low'

# 선택된 컬럼들로 새로운 데이터프레임 생성
data = data0[selected_columns]



#실수 자료만 선택하기~
data_real_number_columns = data.select_dtypes(include = ['float']).columns
data_real_number = data[data_real_number_columns]



#로버스트 스케일링
#robustScaler = RobustScaler()
#X_train_robust = robustScaler.fit_transform(data_real_number)
#data_real_number_scaled = pd.DataFrame(X_train_robust,
                            #index=data_real_number.index,
                            #columns=data_real_number.columns)

#MinMax Scaling # 실수 자료만 스케이일링~
scaler = MinMaxScaler()
data_real_number_normalized = scaler.fit_transform(data_real_number)
data_real_number_normalized_df = pd.DataFrame(data_real_number_normalized, columns=data_real_number_columns)

#더미변수화
categorical_columns = data.select_dtypes(include=['object']).columns # 범주형 변수만을 선택
one_hot_encoder = OneHotEncoder() # OneHotEncoder 객체 생성
dummy_variables = one_hot_encoder.fit_transform(data[categorical_columns]) # 범주형 변수를 더미 변수로 변환
dummy_df = pd.DataFrame(dummy_variables.toarray(), columns=one_hot_encoder.get_feature_names_out(categorical_columns)) # 더미 변수를 데이터프레임으로 변환


# 실수형 자료 + 더미변수 // (원래의 데이터프레임에서 범주형 변수를 제거하고 더미 변수 데이터프레임을 추가)
data_final = pd.concat([data_real_number_normalized_df, dummy_df], axis=1)

# 부도자 첨가하기
add_column = data['defaulter']
data_final['defaulter'] = add_column

#이상치 여기서 제거하세요~
data_final = data_final[data_final['annual_inc'] < 1500000]
data_final = data_final[data_final['dti'] < 120]
data = data[data['revol_util'] <= 100]

#임시 작성..
#data_final.dropna(inplace=True)
#data_final.info()

#test data split
data_sampled = data_final.sample(frac=0.8, random_state=None)
x = data_sampled.drop(['defaulter'], axis=1)
y = data_sampled[['defaulter']]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=None)
  #메모리 확보
